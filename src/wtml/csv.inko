import std.csv (Parser)
import std.fs.file (ReadOnlyFile)
import std.fs.path (Path)
import std.io (Read)
import wtml.config (Config)

fn parse(
  path: Path,
  config: ref Config,
) -> Result[Array[(String, Float)], String] {
  let parser = try ReadOnlyFile
    .new(path.clone)
    .map(fn (v) { Parser.new(v) })
    .map_error(fn (e) { e.to_string })

  # Skip the headers.
  try parser.skip_line.map_error(fn (e) { e.to_string })

  let amounts = Map.new

  loop {
    match try Transaction.parse(parser) {
      case Some({ @description = desc, @amount = amount }) -> {
        let key = config.mapping.opt(desc).or(desc)
        let cur = amounts.opt(key).or(0.0)

        amounts.set(key, cur + amount)
      }
      case _ -> {}
    }

    match parser.next_line {
      case Ok(true) -> {}
      case Ok(false) -> break
      case Error(e) -> throw e.to_string
    }
  }

  let pairs = amounts.into_iter.map(fn (kv) { (kv.key, kv.value) }).to_array

  pairs.sort_by(fn (a, b) { b.1.cmp(a.1) })
  Result.Ok(pairs)
}

class inline Transaction {
  let @description: String
  let @amount: Float

  fn static parse[T: mut + Read](
    parser: mut Parser[T],
  ) -> Result[Option[Transaction], String] {
    let desc = try parser.skip_column.then(fn (_) { parser.column }).map_error(
      fn (e) { e.to_string },
    )
    let kind = try parser
      .skip_columns(3)
      .then(fn (_) { parser.column })
      .map_error(fn (e) { e.to_string })
    let amount_start = parser.offset
    let amount = try parser
      .column
      .then(fn (v) {
        try parser.skip_columns(2)
        Result.Ok(v)
      })
      .map_error(fn (e) { e.to_string })

    if kind != 'Debit' { return Result.Ok(Option.None) }

    match Float.parse(amount.replace(',', '.')) {
      case Some(v) -> {
        Result.Ok(Option.Some(Transaction(description: desc, amount: v)))
      }
      case _ -> {
        Result.Error('the amount at byte offset ${amount_start} is invalid')
      }
    }
  }
}
