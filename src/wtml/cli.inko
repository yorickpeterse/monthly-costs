import std.fs.path (Path)
import std.io (Write)
import std.optparse (Help, Options)
import wtml.config (Config)
import wtml.csv (parse)

fn show_help(options: ref Options, output: mut Write) {
  let help = Help
    .new('wtml [CSV FILE]')
    .description(
      'Provides an overview of monthly costs based on an ING CSV file.',
    )
    .section('Options')
    .options(options)
    .to_string

  let _ = output.write_string(help)
}

fn pub run(
  arguments: Array[String],
  working_directory: Path,
  output: mut Write,
) -> Result[Nil, String] {
  let opts = Options.new

  opts.flag('h', 'help', 'Show this help message')
  opts.single('c', 'config', 'PATH', 'The configuration file to use')

  let matches = try opts.parse(arguments).map_error(fn (e) { e.to_string })

  if matches.contains?('help') or matches.remaining.empty? {
    show_help(opts, output)
    return Result.Ok(nil)
  }

  let path = match matches.remaining.opt(0) {
    case Some(v) -> v.to_path
    case _ -> {
      show_help(opts, output)
      return Result.Ok(nil)
    }
  }

  let conf = try matches
    .value('config')
    .map(fn (p) { Config.load(p.to_path) })
    .or_else(fn { Config.default(working_directory) })
    .map_error(fn (e) { 'failed to load the configuration: ${e}' })

  let pairs = try parse(path, conf).map_error(fn (e) { e.to_string })

  pairs.into_iter.each(fn (kv) {
    output.print('${kv.0}\t${kv.1.round(2).to_string.replace('.', ',')}')
  })

  Result.Ok(nil)
}
